---
- name: Add the OS specific varibles
  include_vars: "{{ ansible_os_family }}.yaml"

- name: Include specific tasks for the RedHat family
  include: redhat.yaml
  when: ansible_os_family == 'RedHat'

- name: Include specific tasks for the Debian family
  include: debian.yaml
  when: ansible_os_family == "Debian"

- name: Create the network configuration file for ethernet interfaces
  template:
    src: "ethernet_{{ ansible_os_family }}.j2"
    dest: "{{ net_path }}/ifcfg-{{ item.device }}"
  with_items: "{{ network_ether_interfaces }}"
  when: network_ether_interfaces is defined
  register: ether_result

- name: Create the network configuration file for vlan devices
  template:
    src: "ethernet_{{ ansible_os_family }}.j2"
    dest: "{{ net_path }}/ifcfg-{{ item.device }}"
  with_items: "{{ network_vlan_interfaces }}"
  when: network_vlan_interfaces
  register: vlan_result

- name: Make sure the 8021q module is loaded
  modprobe:
    name: 8021q
    state: present
  when: vlan_result is changed

- name: Make the 8021q module persistent
  become: true
  lineinfile:
    line: '8021q'
    dest: /etc/modules
    insertafter: EOF
  when:
    - network_vlan_interfaces
    - network_modprobe_persist

- name: Create the network configuration file for bridge devices
  template:
    src: "bridge_{{ ansible_os_family }}.j2"
    dest: "{{ net_path }}/ifcfg-{{ item.device }}"
  with_items: "{{ network_bridge_interfaces }}"
  when: network_bridge_interfaces is defined
  register: bridge_result

- name: Create the network configuration file for port on the bridge devices
  template:
    src: "bridge_port_{{ ansible_os_family }}.j2"
    dest: "{{ net_path }}/ifcfg-{{ item.1 }}"
  with_subelements:
    - '{{ network_bridge_interfaces }}'
    - bridge_ports
  when: network_bridge_interfaces is defined
  register: bridge_port_result

# Restart Network Interfaces (deconfigurate & reconfigurate interfaces)
- include: restartscript.yaml
  when: network_allow_service_restart and ansible_os_family == 'Debian'

- name: Enable the "network" service
  service:
    name: network
    enabled: true
  check_mode: yes
  register: network_service
  ignore_errors: true
  when: network_allow_service_restart and ansible_os_family == 'RedHat'

- name: Verify if the "network" service is enabled
  set_fact:
    network_service_enabled: "{{ not network_service.failed
        and not network_service.changed }}"
  when: network_allow_service_restart and ansible_os_family == 'RedHat'

- name: Restart the "network" service on Red Hat systems
  service:
    name: network
    state: restarted
  when: >
    (network_allow_service_restart
     and ansible_os_family == 'RedHat'
     and network_service_enabled)
     and (ether_result is changed
          or bond_port_result is changed
          or bond_result is changed
          or vlan_result is changed
          or bridge_result is changed
          or bridge_port_result is changed)

